version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pms_postgres
    environment:
      POSTGRES_DB: pms_db
      POSTGRES_USER: pms_user
      POSTGRES_PASSWORD: pms_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - pms_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pms_user -d pms_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: pms_redis
    command: redis-server --appendonly yes --requirepass pms_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - pms_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: pms_api
    environment:
      - DATABASE_URL=postgresql://pms_user:pms_password@postgres:5432/pms_db
      - REDIS_URL=redis://:pms_redis_password@redis:6379/0
      - DEBUG=false
      - ENVIRONMENT=production
    volumes:
      - ./uploads:/app/uploads
      - ./exports:/app/exports
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - pms_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Streamlit Dashboard
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: pms_dashboard
    environment:
      - API_BASE_URL=http://api:8000
      - DATABASE_URL=postgresql://pms_user:pms_password@postgres:5432/pms_db
      - REDIS_URL=redis://:pms_redis_password@redis:6379/0
    volumes:
      - ./cache:/app/cache
      - ./exports:/app/exports
    ports:
      - "8501:8501"
    networks:
      - pms_network
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pms_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    ports:
      - "80:80"
      - "443:443"
    networks:
      - pms_network
    depends_on:
      - api
      - dashboard
    restart: unless-stopped

  # Data Ingestion Worker (Celery)
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: pms_worker
    environment:
      - DATABASE_URL=postgresql://pms_user:pms_password@postgres:5432/pms_db
      - REDIS_URL=redis://:pms_redis_password@redis:6379/0
      - CELERY_BROKER_URL=redis://:pms_redis_password@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:pms_redis_password@redis:6379/2
    volumes:
      - ./uploads:/app/uploads
      - ./cache:/app/cache
      - ./logs:/app/logs
    networks:
      - pms_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Beat Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.scheduler
    container_name: pms_scheduler
    environment:
      - DATABASE_URL=postgresql://pms_user:pms_password@postgres:5432/pms_db
      - REDIS_URL=redis://:pms_redis_password@redis:6379/0
      - CELERY_BROKER_URL=redis://:pms_redis_password@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:pms_redis_password@redis:6379/2
    volumes:
      - ./logs:/app/logs
    networks:
      - pms_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: pms_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - pms_network
    restart: unless-stopped

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: pms_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - pms_network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  pms_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

