# PMS Intelligence Hub - Deployment Configuration
# Configuration for different deployment environments

# Global settings
project_name: "PMS Intelligence Hub"
version: "1.0.0"
maintainer: "PMS Team"

# Environment configurations
environments:
  # Local development environment
  local:
    type: "local"
    host: "0.0.0.0"
    port: 8501
    debug: true
    auto_reload: true
    environment_variables:
      ENVIRONMENT: "development"
      DEBUG: "true"
      LOG_LEVEL: "DEBUG"
    
  # Docker containerized environment
  docker:
    type: "docker"
    compose_file: "docker-compose.yml"
    services:
      - postgres
      - redis
      - api
      - dashboard
      - nginx
      - worker
      - scheduler
    ports:
      dashboard: 8501
      api: 8000
      postgres: 5432
      redis: 6379
      nginx: 80
      grafana: 3000
    volumes:
      - "./uploads:/app/uploads"
      - "./exports:/app/exports"
      - "./cache:/app/cache"
      - "./logs:/app/logs"
    environment_variables:
      ENVIRONMENT: "production"
      DEBUG: "false"
      LOG_LEVEL: "INFO"
    
  # AWS cloud environment
  aws:
    type: "aws"
    region: "us-east-1"
    availability_zones:
      - "us-east-1a"
      - "us-east-1b"
    
    # EC2 Configuration (Free Tier Optimized)
    compute:
      instance_type: "t3.micro"  # Free tier eligible
      min_instances: 1
      max_instances: 2
      key_pair: "pms-hub-keypair"
      security_groups:
        - name: "pms-hub-sg"
          rules:
            - port: 80
              protocol: "tcp"
              source: "0.0.0.0/0"
            - port: 443
              protocol: "tcp"
              source: "0.0.0.0/0"
            - port: 22
              protocol: "tcp"
              source: "0.0.0.0/0"
    
    # RDS Configuration (Free Tier)
    database:
      engine: "postgres"
      instance_class: "db.t3.micro"  # Free tier eligible
      allocated_storage: 20  # Free tier limit
      multi_az: false  # Single AZ for free tier
      backup_retention: 7
      
    # ElastiCache Configuration (Optional)
    cache:
      node_type: "cache.t3.micro"
      num_nodes: 1
      
    # S3 Configuration
    storage:
      bucket_name: "pms-hub-storage"
      versioning: true
      lifecycle_rules:
        - name: "delete-old-logs"
          expiration_days: 30
          
    # CloudWatch Configuration
    monitoring:
      log_retention_days: 14
      metrics_enabled: true
      alarms:
        - name: "high-cpu"
          metric: "CPUUtilization"
          threshold: 80
          comparison: "GreaterThanThreshold"
        - name: "high-memory"
          metric: "MemoryUtilization"
          threshold: 85
          comparison: "GreaterThanThreshold"
    
    # Load Balancer Configuration
    load_balancer:
      type: "application"
      scheme: "internet-facing"
      health_check:
        path: "/health"
        interval: 30
        timeout: 5
        healthy_threshold: 2
        unhealthy_threshold: 5
    
    # Auto Scaling Configuration
    auto_scaling:
      target_cpu_utilization: 70
      scale_up_cooldown: 300
      scale_down_cooldown: 300
    
    # Cost optimization settings
    cost_optimization:
      use_free_tier: true
      spot_instances: false  # Disabled for stability
      reserved_instances: false  # Not needed for small deployments
      
    # Tags for resource management
    tags:
      Project: "PMSVinchu"
      Environment: "production"
      Owner: "PMS Team"
      CostCenter: "IT"
      Backup: "required"

# Health check configuration
health_check:
  timeout: 300  # 5 minutes
  interval: 10  # 10 seconds
  retries: 30
  endpoints:
    dashboard: "/_stcore/health"
    api: "/health"
    database: "/db/health"
  
# Backup configuration
backup:
  enabled: true
  retention_days: 7
  schedule: "0 2 * * *"  # Daily at 2 AM
  destinations:
    - type: "local"
      path: "./backups"
    - type: "s3"
      bucket: "pms-hub-backups"
      prefix: "daily-backups/"

# Security configuration
security:
  ssl_enabled: true
  force_https: true
  allowed_hosts:
    - "localhost"
    - "127.0.0.1"
    - "*.amazonaws.com"
  cors_origins:
    - "http://localhost:3000"
    - "http://localhost:8501"
  rate_limiting:
    enabled: true
    requests_per_minute: 60
  
# Logging configuration
logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  handlers:
    - type: "file"
      filename: "logs/pms_hub.log"
      max_size: "10MB"
      backup_count: 5
    - type: "console"
      level: "INFO"
  loggers:
    dashboard: "INFO"
    api: "INFO"
    database: "WARNING"
    
# Performance configuration
performance:
  # Database connection pooling
  database_pool:
    min_connections: 5
    max_connections: 20
    pool_timeout: 30
    
  # Redis caching
  cache:
    default_timeout: 3600  # 1 hour
    key_prefix: "pms_hub:"
    
  # API rate limiting
  api_limits:
    default: "100/hour"
    authenticated: "1000/hour"
    
# Monitoring and alerting
monitoring:
  enabled: true
  metrics:
    - name: "response_time"
      threshold: 2000  # 2 seconds
    - name: "error_rate"
      threshold: 5  # 5%
    - name: "memory_usage"
      threshold: 80  # 80%
  
  alerts:
    email:
      enabled: true
      recipients:
        - "admin@pmshub.com"
        - "devops@pmshub.com"
    slack:
      enabled: false
      webhook_url: ""
      channel: "#alerts"

# Feature flags
features:
  api_docs: true
  metrics_endpoint: true
  health_checks: true
  audit_logging: true
  performance_profiling: false
  debug_toolbar: false

# Integration settings
integrations:
  salesforce:
    enabled: true
    api_version: "58.0"
    timeout: 30
    retry_attempts: 3
    
  wealth_spectrum:
    enabled: true
    api_version: "v1"
    timeout: 30
    retry_attempts: 3
    
  external_apis:
    timeout: 15
    retry_attempts: 2
    
# Deployment hooks
hooks:
  pre_deploy:
    - "python -m pytest tests/ -v"
    - "python -m flake8 src/ --max-line-length=100"
    - "python -m black src/ --check"
    
  post_deploy:
    - "python deployment/verify_deployment.py"
    - "python deployment/run_smoke_tests.py"
    
  rollback:
    - "docker-compose down"
    - "git checkout HEAD~1"
    - "docker-compose up -d"

# Maintenance windows
maintenance:
  allowed_hours:
    start: "02:00"
    end: "04:00"
    timezone: "UTC"
  notification_hours: 24  # Notify 24 hours in advance
  
# Disaster recovery
disaster_recovery:
  backup_frequency: "daily"
  recovery_time_objective: "4h"  # 4 hours
  recovery_point_objective: "1h"  # 1 hour
  failover_region: "us-west-2"

